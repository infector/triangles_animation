"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var svgContainer = document.getElementById("svg-container");
var svgCanvas = document.createElementNS("http://www.w3.org/2000/svg", "svg");
svgCanvas.setAttribute("height", "60%");
svgCanvas.setAttribute("width", "60%");
svgCanvas.setAttribute("style", "background-color: rgba(0, 0, 0, 0.3)");
svgContainer.appendChild(svgCanvas);
var trianglesArray = [];

var Triangles = function () {
  function Triangles() {
    var apxCord = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      x1: 0,
      y1: 0,
      x2: 50,
      y2: 0,
      x3: 25,
      y3: 43
    };

    _classCallCheck(this, Triangles);

    this.triangleElem;
    this.apxCord = apxCord;
  }

  _createClass(Triangles, [{
    key: "drawTriangle",
    value: function drawTriangle() {
      var fill = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "rgb(25, 25, 24)";


      this.triangleElem = document.createElementNS("http://www.w3.org/2000/svg", "polygon");
      this.triangleElem.setAttribute("points", this.apxCord.x1 + "," + this.apxCord.y1 + " " + this.apxCord.x2 + "," + this.apxCord.y2 + " " + this.apxCord.x3 + "," + this.apxCord.y3);
      this.triangleElem.setAttribute("fill", fill);
      svgCanvas.appendChild(this.triangleElem);
    }
  }]);

  return Triangles;
}();

var belowViewport = void 0;
var svgWidth = svgCanvas.clientWidth;
// let a = 1;
var upsideDown = false;
var shifted = true;
var triangleField = new Triangles();
triangleField.drawTriangle();
trianglesArray.push(triangleField.triangleElem);
while (!belowViewport) {

  var lastIndex = trianglesArray.lastIndexOf(triangleField.triangleElem);
  belowViewport = elementBelowViewport(trianglesArray[lastIndex]);

  if (!upsideDown) {
    triangleField.apxCord.x1 += 50;
    triangleField.apxCord.y1 += 0;
    triangleField.apxCord.x2 += 25;
    triangleField.apxCord.y2 += 43;
    triangleField.apxCord.x3 += 0;
    triangleField.apxCord.y3 += 0;
    triangleField.drawTriangle();
    trianglesArray.push(triangleField.triangleElem);
    upsideDown = true;
  } else {
    triangleField.apxCord.x1 += 0;
    triangleField.apxCord.y1 += 0;
    triangleField.apxCord.x2 += 25;
    triangleField.apxCord.y2 += -43;
    triangleField.apxCord.x3 += 50;
    triangleField.apxCord.y3 += 0;
    triangleField.drawTriangle();
    trianglesArray.push(triangleField.triangleElem);
    // trianglesArray[lastIndex].setAttribute("fill", "blue"); //do usuniecia
    upsideDown = false;
    if (triangleField.apxCord.x1 > svgWidth && shifted) {
      triangleField.apxCord.x1 = -25;
      triangleField.apxCord.y1 += 43;
      triangleField.apxCord.x2 = 25;
      triangleField.apxCord.y2 += 43;
      triangleField.apxCord.x3 = 0;
      triangleField.apxCord.y3 += 43;
      triangleField.drawTriangle();
      trianglesArray.push(triangleField.triangleElem);
      shifted = false;
    } else if (triangleField.apxCord.x1 > svgWidth) {
      triangleField.apxCord.x1 = 0;
      triangleField.apxCord.y1 += 43;
      triangleField.apxCord.x2 = 50;
      triangleField.apxCord.y2 += 43;
      triangleField.apxCord.x3 = 25;
      triangleField.apxCord.y3 += 43;
      triangleField.drawTriangle();
      trianglesArray.push(triangleField.triangleElem);
      shifted = true;
    };
  };

  console.log(belowViewport); // do usuniecia
  //  a++;
  //   break;
}

var random = void 0;

// let shuffledArray = shuffle(trianglesArray);
setInterval("myFunction()", 50);

function myFunction() {
  random = Math.floor(Math.random() * trianglesArray.length);
  if (trianglesArray.length > 0) {
    trianglesArray[random].classList.add("animate");
    trianglesArray.splice(random, 1);
  }
};

function shuffle(array) {
  // Fisher-Yates shuffling
  for (var i = array.length - 1; i > 0; i--) {
    var j = Math.floor(Math.random() * (i + 1));
    var _ref = [array[j], array[i]];
    array[i] = _ref[0];
    array[j] = _ref[1];
  }
  return array;
}

// shuffle(trianglesArray);


trianglesArray[trianglesArray.lastIndexOf(triangleField.triangleElem)].setAttribute("style", "fill: red");

function elementBelowViewport(element) {
  var rect = element.getBoundingClientRect();
  var html = document.documentElement;
  return rect.top >= svgCanvas.clientHeight;
}
//# sourceMappingURL=scripts.min.js.map
